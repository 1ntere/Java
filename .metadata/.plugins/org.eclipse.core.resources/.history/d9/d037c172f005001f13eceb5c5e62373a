package com.kh.StackEx;

import java.util.LinkedList;
import java.util.Queue;

/*
Queue(큐)
	먼저 추가된 항목이 먼저 제거
	FIFO	First In - First Out	먼저 추가된 항목이 가장 먼저 제거 (like 선입선출)
									데이터가 줄을 서있는 것과 유사하며, 가장 먼저 들어간 항목이 가장 앞에 위치
									ex) 티켓팅 대기열 기능, 이벤트 처리 기능

메서드
	offer()		: 큐에 공간이 충분할 경우 값이 추가되고, 추가되면 true 반환
				  추가되지 못하면 예외
				  add를 사용할 수 있지만 offer와 마찬가지로 공간이 없으면 예외 처리가 됨
	poll()		: 값을 제거하고 반환, 만약에 비어있는 경우 null 반환
	remove()	: poll과 동일한 기능을 수행하지만, 비어있는 경우 예외를 던짐
	peek()		: 맨 앞에 있는 값을 반환하지만 제거하지는 않음
	element()	: peek처럼 맨 앞에 있는 값을 반환하지만 제거하지 않음, 비어있는 경우 예외를 던짐
*/
public class QueueEx {
	public static void main(String[] args) {
		//Stack은 Stack 사용하는데 Queue는 LinkedList를 사용하는 이유
		//Queue는 인터페이스이기 때문에 직접 Queue Queue를 사용할 수 없다.
		//따라서 Queue			LinkeList를 사용해서 많이 작성한다.
		Queue<Integer> 큐 = new LinkedList<>();
		
		//offer() - 큐에 데이터 추가
		큐.offer(1);
		큐.offer(2);
		큐.offer(3);
		
		//큐에서 맨 앞 데이터를 확인, 제어
		int 맨앞 = 큐.poll();//가장 앞에 있던 1을 반환하고 제거함
		System.out.println(맨앞);//1
		
		//큐 맨 앞에 데이터 확인
		int 데이터확인 = 큐.peek();
		System.out.println(데이터확인);
		
		boolean isEmpty = 큐.isEmpty();
		System.out.println("비어있나요? " + isEmpty);
		
			
	}
}
